{"version":3,"sources":["App.js","index.js"],"names":["App","useState","options","setOptions","highScore","setHighScore","moves","setMoves","m","s","time","setTime","interv","setInterv","status","setStatus","useEffect","json","localStorage","getItem","savedScore","JSON","parse","updatedS","updatedM","start","run","setInterval","stop","clearInterval","reset","className","onClick","prevOptions","setTimeout","MemoryGame","game","setGame","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","colors","newGame","i","firstOption","id","colorId","color","flipped","secondOption","push","shuffledGame","sort","Math","random","some","card","length","multiplier","bestPossible","score","pointsLost","toPrecision","stringify","setItem","confirmAlert","title","buttons","label","gameLength","overlayClassName","newIndexes","map","index","key","Card","set","useSpring","opacity","transform","config","mass","tension","friction","indexOf","state","div","style","interpolate","o","t","backgroundImage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ab616b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSpring, animated as a } from \"react-spring\";\nimport { confirm } from \"react-confirm\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport \"./styles.css\";\nexport default function App() {\n  const [options, setOptions] = useState(null)\n  const [highScore, setHighScore] = useState(0)\n  const [moves, setMoves] = useState(0)\n  const [time, setTime] = useState({ m:0, s:0});\n  const [interv, setInterv] = useState();\n  const [status, setStatus] = useState(0);\n  useEffect(() => {\n    const json = localStorage.getItem('memorygamehighscore')\n    const savedScore = JSON.parse(json)\n    if (savedScore) {\n      setHighScore(savedScore)\n    }\n  }, [])\n\n  \n  var updatedS = time.s, updatedM = time.m;\n  const start = () => {\n    \n    updatedS=0;\n    updatedM=0;\n   \n    run();\n    setStatus(1);\n    setInterv(setInterval(run, 1000));\n  };\n  const run = () => {\n    \n    if(updatedS === 60){\n      updatedM++;\n      updatedS = 0;\n    }\n    \n    updatedS++;\n    return setTime({ m:updatedM, s:updatedS});\n  };\n\n  const stop = () => {\n    clearInterval(interv);\n    setStatus(2);\n    setTime({ m:0, s:0})\n    \n    start();\n  };\n  const reset = () => {\n    clearInterval(interv);\n    setStatus(0);\n    setTime({ m:0, s:0})\n    \n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h1>Brain Smart</h1>\n        <div>High Score: {highScore}</div>\n        <div>Moves: {moves}</div>\n        <div>Time: {time.m}:{time.s}</div>\n\n        <div>\n          {options === null ? (\n            <>\n              <button onClick={() => {setOptions(12); start()}}>Beginner</button>\n              <button onClick={() => {setOptions(16); start()}}>Intermediate</button>\n              <button onClick={() => {setOptions(20); start()}}>Expert</button>\n            </>\n          ) : (\n            <>\n              <button\n                onClick={() => {\n                  const prevOptions = options\n                  setMoves(0)\n                  setOptions(null)\n                \n                  stop()\n                  setTimeout(() => {\n                    setOptions(prevOptions)\n                   \n                  }, 5)\n                }}\n              >\n                Restart\n              </button>\n              <button onClick={() => {setOptions(null); reset(); setMoves(0)} }>Back</button>\n            </>\n          )}\n        </div>\n      </div>\n\n      {options ? (\n        <MemoryGame\n          options={options}\n          setOptions={setOptions}\n          highScore={highScore}\n          setHighScore={setHighScore}\n          moves={moves}\n          setMoves={setMoves}\n          status={status} reset={reset}\n          start={start}\n          stop={stop}\n          reset={reset}\n        />\n      ) : (\n        <h2>Select a Level to Play!</h2>\n      )}\n    </div>\n    \n  )\n}\n\nfunction MemoryGame({options, setOptions, highScore, setHighScore,moves,setMoves,stop,reset}) {\n  const [game, setGame] = useState([])\n  const [flippedCount, setFlippedCount] = useState(0)\n  const [flippedIndexes, setFlippedIndexes] = useState([])\n  \n  const colors = [\n   \n    './star.png',\n    './circle.png',\n    './cube.png',\n    './triangle.png',\n    './pentagon.png',\n    './square.png',\n    './pyramid.png',\n    './diamond.png',\n    './cross.png',\n    './star_9.png',\n    './cylinder.png',\n    './cuboid.png',\n\n  ]\n useEffect(() => {\n  \n\n  \n    const newGame = []\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: 2 * i,\n        colorId: i,\n        color: colors[i],\n        flipped: false,\n      }\n      const secondOption = {\n        id: 2 * i + 1,\n        colorId: i,\n        color: colors[i],\n        flipped: false,\n      }\n\n      newGame.push(firstOption)\n      newGame.push(secondOption)\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5)\n    setGame(shuffledGame)\n  }, [])\n\n  useEffect(() => {\n    const finished = !game.some(card => !card.flipped)\n    if (finished && game.length > 0) {\n      setTimeout(() => {\n        const bestPossible = game.length\n        let multiplier\n  \n        if (options === 12) {\n          multiplier = 5\n        } else if (options === 16) {\n          multiplier = 2.5\n        } else if (options === 20) {\n          multiplier = 1\n        }\n  \n        const pointsLost = multiplier * (0.6 * flippedCount - bestPossible)\n  \n        let score\n        if (pointsLost < 100) {\n          score = 100 - pointsLost\n          score=score.toPrecision(2);\n        } else {\n          score = 0\n        }\n  \n        if (score > highScore) {\n          setHighScore(score)\n          const json = JSON.stringify(score)\n          localStorage.setItem('memorygamehighscore', json)\n        }\n        \n        confirmAlert({\n          title: 'SCORE: '+ score + ' New Game?',\n          buttons: [\n            {\n              label: 'Yes',\n              onClick: () => {\n                const gameLength = game.length\n                setMoves(0)\n                stop()\n                setOptions(null)\n                setTimeout(() => {\n                  setOptions(gameLength)\n                }, 5)\n              }\n            },\n            {\n              label: 'No',\n              onClick: () => {\n                setOptions(null)\n                setMoves(0)\n                reset()\n              }\n            }\n          ],\n          overlayClassName: \"overlay\"\n        }\n        );\n       \n      }, 500)\n    }\n  }, [game])\n\n  if (flippedIndexes.length === 2) {\n    const match = game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId\n  \n    if (match) {\n      const newGame = [...game]\n      newGame[flippedIndexes[0]].flipped = true\n      newGame[flippedIndexes[1]].flipped = true\n      setGame(newGame)\n  \n      const newIndexes = [...flippedIndexes]\n      newIndexes.push(false)\n      setFlippedIndexes(newIndexes)\n    } else {\n      const newIndexes = [...flippedIndexes]\n      newIndexes.push(true)\n      setFlippedIndexes(newIndexes)\n    }\n  }\n\n  if (game.length === 0) return <div>loading...</div>\n  else {\n    return (\n      <div id=\"cards\">\n        {game.map((card, index) => (\n          <div className=\"card\" key={index}>\n            <Card\n              id={index}\n              color={card.color}\n              game={game}\n              flippedCount={flippedCount}\n              setFlippedCount={setFlippedCount}\n              flippedIndexes={flippedIndexes}\n              setFlippedIndexes={setFlippedIndexes}\n              moves={moves}\n              setMoves={setMoves}\n            />\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n\nfunction Card({\n  id,\n  color,\n  game,\n  flippedCount,\n  setFlippedCount,\n  flippedIndexes,\n  setFlippedIndexes,\n  moves,\n  setMoves,\n}) {\n  const [flipped, set] = useState(false)\n  const {transform, opacity} = useSpring({\n    opacity: flipped ? 1 : 0,\n    transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\n    config: {mass: 5, tension: 500, friction: 80},\n  })\n\n  useEffect(() => {\n    if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\n      setTimeout(() => {\n        set(state => !state)\n        setFlippedCount(flippedCount + 1)\n        setFlippedIndexes([])\n        setMoves(moves+1)\n      }, 700)\n    } else if (flippedIndexes[2] === false && id === 0) {\n      setFlippedCount(flippedCount + 1)\n      setFlippedIndexes([])\n      setMoves(moves+1)\n\n    }\n  }, [flippedIndexes])\n  \n\n  const onCardClick = () => {\n    if (!game[id].flipped && flippedCount % 3 === 0) {\n      set(state => !state)\n      setFlippedCount(flippedCount + 1)\n      const newIndexes = [...flippedIndexes]\n      newIndexes.push(id)\n      setFlippedIndexes(newIndexes)\n      \n    } else if (\n      flippedCount % 3 === 1 &&\n      !game[id].flipped &&\n      flippedIndexes.indexOf(id) < 0\n    ) {\n      set(state => !state)\n      setFlippedCount(flippedCount + 1)\n      const newIndexes = [...flippedIndexes]\n      newIndexes.push(id)\n      setFlippedIndexes(newIndexes)\n    }\n  }\n\n  return (\n    \n    <div onClick={onCardClick}>\n    \n      <a.div\n        className=\"c back\"\n        style={{\n          opacity: opacity.interpolate(o => 1 - o),\n          transform,\n        }}\n      />\n      <a.div\n        className=\"c front\"\n        style={{\n          opacity,\n          transform: transform.interpolate(t => `${t} rotateX(180deg)`),\n          backgroundImage:`url(${color})`\n         \n        }}\n      />\n    </div>\n  )\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}